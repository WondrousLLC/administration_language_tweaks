<?php

/**
 * @file
 * Contains administration_language_tweaks.module.
 */

use Drupal\Core\Entity\ContentEntityTypeInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Language\LanguageInterface;

/**
 * Implements hook_help().
 */
function administration_language_tweaks_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the administration_language_tweaks module.
    case 'help.page.administration_language_tweaks':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Administration pages language setting.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_local_tasks_alter().
 *
 * Alters the local tasks titles and translates to the administration default
 * language.
 *
 * @param $local_tasks
 */
function administration_language_tweaks_local_tasks_alter(&$local_tasks) {
  // Get the administration default language
  // see  /admin/config/regional/language/detection/administration_language
  $administration_language = _administration_language_tweaks_get_administration_langauge();

  // Iterate over the local tasks and translates the title.
  foreach ($local_tasks as $key => &$local_task) {
    $title = $local_task['title'];
    $options = ['langcode' => $administration_language];
    $arguments = [];

    // In some case the title is a string.
    if (is_string($title)) {
      $untranslated_string = $title;
    }
    elseif ($title instanceof TranslatableMarkup) {
      // Merge the current options and override the language.
      $options += $title->getOptions();
      $untranslated_string = $title->getUntranslatedString();
      $arguments = $title->getArguments();
    }

    // Create the new translation.
    $title = new TranslatableMarkup($untranslated_string, $arguments, $options);
    $local_task['title'] = $title->render();
  }
}

/**
 * Helper function to get the administration language.
 *
 * @return array|mixed|null
 */
function _administration_language_tweaks_get_administration_langauge() {
  $langcode = FALSE;
  $current_user = \Drupal::currentUser();

  if ($current_user->hasPermission('use_administration_language_negotiation')) {
    $langcode = $current_user->getPreferredAdminLangcode();
  }

  return $langcode;
}

/**
 * Entity label callback function.
 *
 * @param $entity
 *   The entity object.
 *
 * @return null|string
 */
function administration_language_tweaks_entity_label_callback($entity) {
  $label = [];
  // The LanguageInterface::TYPE_INTERFACE is already set by the negotiator
  // Drupal\administration_language_negotiation\Plugin\LanguageNegotiation\LanguageNegotiationAdministrationLanguage
  $langcode = \Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_INTERFACE)
    ->getId();
  if ($langcode != $entity->language() && $entity->hasTranslation($langcode)) {
    $entity_clone = $entity->getTranslation($langcode);
    if ($entity_clone) {
      $label[] = administration_language_tweaks_get_entity_label($entity_clone);
    }
  }
  $label[] = administration_language_tweaks_get_entity_label($entity);

  return $label ? implode(' - ', $label) : NULL;
}

/**
 * Loads the entity label.
 *
 * @param $entity
 *   The entity object.
 *
 * @return null|string
 *   The entity label string.
 */
function administration_language_tweaks_get_entity_label($entity) {
  $entity_type = $entity->getEntityType();
  $label_callback = $entity_type->getLabelCallback();

  // The function Drupal\Core\Entity\ContentEntityBase::label() loads the label
  // by calling getEntityKey(). This function is protected and can't be called.
  // Therefor we call the same entity label function but turning off the label
  // callback, resulting the call of getEntityKey() by the class itself.
  $entity_type->setLabelCallback(NULL);
  $label = $entity->label();
  $entity_type->setLabelCallback($label_callback);

  return $label;
}

/**
 * Implements hook_entity_type_alter().
 */
function administration_language_tweaks_entity_type_alter($entity_types) {
  foreach ($entity_types as $entity_type => $info) {
    // Override the label for Content Entities without label callback only.
    if ($info instanceof ContentEntityTypeInterface && !$info->hasLabelCallback()) {
      $info->setLabelCallback('administration_language_tweaks_entity_label_callback');
    }
  }
}
